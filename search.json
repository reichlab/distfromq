[{"path":"http://reichlab.io/distfromq/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://reichlab.io/distfromq/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"distfromq","text":"distfromq package provides functions constructing approximation probability distribution finite set quantiles distribution. package provides four main functions: make_p_fn returns function analogous pnorm, can used evaluate approximated cumulative distribution function (CDF). make_d_fn returns function analogous dnorm, can used evaluate approximated probability density function (PDF). make_q_fn returns function analogous qnorm, can used evaluate approximated quantile function (QF), .e., inverse CDF. make_r_fn returns function analogous rnorm, can used simulate pseudo-random sample approximated distribution. four functions take set probability levels (ps) corresponding quantiles (qs) distribution approximated inputs, well arguments specifying methods interpolating quantiles estimate interior distribution, extrapolating tails distribution using specified parametric family. next section vignette describes methods used approximating distribution, following section gives examples.","code":""},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"methods-description","dir":"Articles","previous_headings":"","what":"Methods description","title":"distfromq","text":"Suppose collection pairs (qk,τk)(q_k, \\tau_k), k=1,…,Kk = 1, \\ldots, K, kk, τk=F(qk)\\tau_k = F(q_k) qk=F−1(τk)q_k = F^{-1}(\\tau_k) distribution CDF FF quantile function F−1F^{-1}. allow distribution regions density discrete point masses, corresponding regions FF flat vertical step. instances, points (qk,τk)(q_k, \\tau_k) may fall within flat region partway vertical step, illustrated . goal reconstruct estimate FF, corresponding PDF ff (distribution continuous), QF F−1F^{-1}, well method sampling distribution. approach first splits provided quantiles discrete part distribution continuous part. , continuous part takes different strategies interpolating interior provided quantiles extrapolating tails. outline procedures briefly give detail : repeated quantiles across different probability levels (.e., qk≈qk′q_k \\approx q_{k'} indices k≠k′k \\neq k'). case, say point mass value(s) qq () repeated. discrete distribution assigns probability point qq corresponding max({τk:qk≈q})−min({τk:qk≈q})\\max(\\{\\tau_{k}: q_k \\approx q\\}) - \\min(\\{\\tau_{k}: q_k \\approx q\\}). parameter dup_tol controls identification quantiles “close enough” identify point mass. parametric family used extrapolation tails lognormal distribution one quantiles approximately 0. case, say point mass zero, probability equal max({τk:qk≈0})\\max(\\{\\tau_{k}: q_k \\approx 0\\}). parameter zero_tol controls identification quantiles “close enough zero” identify point mass. result step collection locations discrete point masses associated probabilities, set quantiles associated probability levels can used estimating continuous part distribution following step. interior quantiles continuous part distribution, estimate continuous component using monotonic spline interpolates quantiles. approximate tails distribution specified location-scale family. estimate quantile function (QF), invert estimate CDF. estimate probability density function (PDF), use derivative spline-based approximation CDF discrete components. function support estimation density function distribution discrete components.","code":""},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"cdf-estimation-on-the-interior","dir":"Articles","previous_headings":"Methods description","what":"CDF estimation on the interior","title":"distfromq","text":"continuous distribution estimated based set adjusted quantile pairs obtained eliminating duplicate quantiles, subtracting cumulative probabilities associated discrete distribution, renormalizing total probability mass associated discrete distribution. approximate CDF continuous distribution component interior points, fit monotonic cubic Hermite spline interpolates set “observations” {(q1,τ1),…,(qK,τK)}\\{(q_1, \\tau_1), \\ldots, (q_K, \\tau_K)\\} (now denote adjusted quantiles continuous distribution component). spline fit yields “stage 1” CDF estimate, F̂(1)\\hat{F}^{(1)}. address issues numerical stability inverting spline process obtaining estimate QF, evaluate stage 1 estimate grid quantile values inserted consecutive pair input quantiles (number new quantile values use argument functions). use “stage 2” CDF estimate linearly interpolates augmented grid (q,τ)(q, \\tau) pairs. behavior can disabled desired, though recommended.","code":""},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"cdf-estimation-in-the-tails","dir":"Articles","previous_headings":"Methods description","what":"CDF estimation in the tails","title":"distfromq","text":"estimate distribution left right tails separately, assuming come specified location-scale family. distributional family assumed tail, location scale parameters may differ left right tails. Setting notation, suppose Y=+b⋅ZY = + b \\cdot Z random variable ZZ specified distribution. Recall probability level τ\\tau, quantile YY can calculated terms corresponding quantile ZZ via FY−1(τ)=+b⋅FZ−1(τ)F_Y^{-1}(\\tau) = + b \\cdot F_Z^{-1}(\\tau). Using quantiles two probability levels τi\\tau_i τj\\tau_j, can calculate value bb using FY−1(τi)−FY−1(τj)FZ−1(τi)−FZ−1(τj)=+b⋅FZ−1(τi)−(+b⋅FZ−1(τj))FZ−1(τi)−FZ−1(τj)=b⋅FZ−1(τi)−FZ−1(τj)FZ−1(τi)−FZ−1(τj)=b\\begin{align*} \\frac{F_Y^{-1}(\\tau_i) - F_Y^{-1}(\\tau_j)}{F_Z^{-1}(\\tau_i) - F_Z^{-1}(\\tau_j)} &= \\frac{+ b \\cdot F_Z^{-1}(\\tau_i) - (+ b \\cdot F_Z^{-1}(\\tau_j))} {F_Z^{-1}(\\tau_i) - F_Z^{-1}(\\tau_j)} \\\\ &= b \\cdot \\frac{F_Z^{-1}(\\tau_i) - F_Z^{-1}(\\tau_j)}{F_Z^{-1}(\\tau_i) - F_Z^{-1}(\\tau_j)} \\\\ &= b \\end{align*} Similarly, can calculate value aa FY−1(τi)−b⋅FZ−1(τi)=+b⋅FZ−1(τi)−b⋅FZ−1(τi)=aF_Y^{-1}(\\tau_i) - b \\cdot F_Z^{-1}(\\tau_i) = + b \\cdot F_Z^{-1}(\\tau_i) - b \\cdot F_Z^{-1}(\\tau_i) = expressions, use two smallest quantiles estimating lower tail two largest quantiles estimating upper tail. choices, construction lower tail integrates τ1\\tau_1 interval (−∞,q1](-\\infty, q_1] upper tail integrates 1−τK1 - \\tau_K interval [qK,∞)[q_K, \\infty). alternative, also allow use log-normal distribution extrapolation tails. parameters log-normal distribution estimated applying approach outlined logarithms quantiles.","code":""},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"estimation-of-the-qf-and-pdf-and-random-deviate-generation","dir":"Articles","previous_headings":"Methods description","what":"Estimation of the QF and PDF, and random deviate generation","title":"distfromq","text":"estimate QF, invert CDF estimate, allowing jumps regions CDF flat. noted , can numerically unstable n_grid = NULL (thus using spline fit directly), recommended n_grid parameter set integer QF estimates desired. estimate PDF instances CDF estimate corresponds continuous distribution, differentiate CDF estimate. stage 2 CDF estimate used, yields “histogram density” estimate, discontinuous piecewise constant. presents challenge, grid size can increased stage 1 CDF estimate used instead. Random deviates obtained sampling U∼Unif(0,1)U \\sim \\text{Unif}(0,1) evaluating approximated quantile function: Y=FY−1(U)Y = F_Y^{-1}(U).","code":""},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"illustration-of-package-functionality","dir":"Articles","previous_headings":"","what":"Illustration of package functionality","title":"distfromq","text":"illustrate package functionality series four examples. first example setting distribution continuous random variable defined probability density funciton. remaining examples illustrate behavior functions settings provided quantiles multiple probability levels lognormal distribution used tail extrapolation least one quantile zero, indicating discrete component distribution.","code":"library(distfromq) library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"example-1","dir":"Articles","previous_headings":"Illustration of package functionality","what":"Example 1","title":"distfromq","text":"first example, work quantiles distribution Y∼log normal(4,0.5)Y \\sim \\text{log normal}(4, 0.5). compare predictive distribution three approximations derived quantiles using different assumptions tail behavior: first assumes log-normal distribution tails. method reconstruct true distribution. second assumes normal distribution tails. method mismatch support lower tail (including values less 0), thinner upper tail log-normal. third assumes Cauchy distribution tails. method mismatch support lower tail (including values less 0), heavier upper tail log-normal.  following illustrates differences density estimates.  emphasize density step function. illustrate setting n_grid parameter artificially low value 1:  can generate random deviates distribution estimates follows:  heavy tails Cauchy distribution dominate display. restrict range horizontal axis:  Finally, display quantile function estimates:","code":"quantile_probs <- seq(from = 0.1, to = 0.9, by = 0.1)  meanlog <- 4.0 sdlog <- 0.5 q_lognormal <- qlnorm(quantile_probs, meanlog = meanlog, sdlog = sdlog) x <- seq(from = 0.0, to = 400.0, length = 501) cdf_lognormal <- plnorm(x, meanlog = meanlog, sdlog = sdlog)  p_lognormal_approx <- make_p_fn(ps = quantile_probs,                                 qs = q_lognormal,                                 tail_dist = \"lnorm\") cdf_lognormal_approx <- p_lognormal_approx(x)  # note that `tail_dist = \"norm\"` is the default; we specify it here for clarity p_normal_approx <- make_p_fn(ps = quantile_probs,                              qs = q_lognormal,                              tail_dist = \"norm\") cdf_normal_approx <- p_normal_approx(x)  p_cauchy_approx <- make_p_fn(ps = quantile_probs,                              qs = q_lognormal,                              tail_dist = \"cauchy\") cdf_cauchy_approx <- p_cauchy_approx(x)  dplyr::bind_rows(   data.frame(     x = x,     y = cdf_lognormal,     dist = \"Log normal\"   ),   data.frame(     x = x,     y = cdf_lognormal_approx,     dist = \"Spline interpolation,\\nlog-normal tails\"   ),   data.frame(     x = x,     y = cdf_normal_approx,     dist = \"Spline interpolation,\\nnormal tails\"   ),   data.frame(     x = x,     y = cdf_cauchy_approx,     dist = \"Spline interpolation,\\nCauchy tails\"   ) ) %>%   ggplot() +   geom_line(     mapping = aes(x = x, y = y, color = dist, linetype = dist),     size = 0.8   ) +   geom_point(     data = data.frame(q = q_lognormal, p = quantile_probs),     mapping = aes(x = q, y = p),     size = 1.2   ) +   scale_color_viridis_d(     \"Distribution\",     end = 0.9   ) +   scale_linetype_discrete(\"Distribution\") +   ylab(\"Probability\") +   xlab(\"\") +   theme_bw() #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. d_lognormal_approx <- make_d_fn(ps = quantile_probs,                                 qs = q_lognormal,                                 tail_dist = \"lnorm\")  d_normal_approx <- make_d_fn(ps = quantile_probs,                              qs = q_lognormal,                              tail_dist = \"norm\")  d_cauchy_approx <- make_d_fn(ps = quantile_probs,                              qs = q_lognormal,                              tail_dist = \"cauchy\")  pdf_lognormal <- dlnorm(x, meanlog = meanlog, sdlog = sdlog) pdf_lognormal_approx <- d_lognormal_approx(x) pdf_normal_approx <- d_normal_approx(x) pdf_cauchy_approx <- d_cauchy_approx(x)  dplyr::bind_rows(   data.frame(     x = x,     y = pdf_lognormal,     dist = \"Log normal\"   ),   data.frame(     x = x,     y = pdf_lognormal_approx,     dist = \"Spline interpolation,\\nlog-normal tails\"   ),   data.frame(     x = x,     y = pdf_normal_approx,     dist = \"Spline interpolation,\\nnormal tails\"   ),   data.frame(     x = x,     y = pdf_cauchy_approx,     dist = \"Spline interpolation,\\nCauchy tails\"   ) ) %>%   ggplot() +   geom_vline(     data = data.frame(q = q_lognormal),     mapping = aes(xintercept = q),     size = 0.2   ) +   geom_line(     mapping = aes(x = x, y = y, color = dist, linetype = dist),     size = 0.8   ) +   scale_color_viridis_d(     \"Distribution\",     end = 0.9   ) +   scale_linetype_discrete(\"Distribution\") +   ylab(\"Probability Density\") +   xlab(\"\") +   theme_bw() d_lognormal_approx_n_grid_1 <- make_d_fn(ps = quantile_probs,                                          qs = q_lognormal,                                          tail_dist = \"lnorm\",                                          interior_args = list(n_grid = 1))  pdf_lognormal_approx_n_grid_1 <- d_lognormal_approx_n_grid_1(x)  dplyr::bind_rows(   data.frame(     x = x,     y = pdf_lognormal_approx,     dist = \"Spline interpolation,\\n n_grid = 20\"   ),   data.frame(     x = x,     y = pdf_lognormal_approx_n_grid_1,     dist = \"Spline interpolation,\\n n_grid = 1\"   ) ) %>%   ggplot() +   geom_vline(     data = data.frame(q = q_lognormal),     mapping = aes(xintercept = q),     size = 0.2   ) +   geom_line(     mapping = aes(x = x, y = y, color = dist),     size = 0.8   ) +   scale_color_viridis_d(     \"Distribution\",     end = 0.7   ) +   scale_linetype_discrete(\"Distribution\") +   ylab(\"Probability Density\") +   xlab(\"\") +   theme_bw() r_normal_approx <- make_r_fn(ps = quantile_probs,                              qs = q_lognormal,                              tail_dist = \"norm\") r_lognormal_approx <- make_r_fn(ps = quantile_probs,                                 qs = q_lognormal,                                 tail_dist = \"lnorm\") r_cauchy_approx <- make_r_fn(ps = quantile_probs,                              qs = q_lognormal,                              tail_dist = \"cauchy\")  normal_approx_sample <- r_normal_approx(n = 10000) lognormal_approx_sample <- r_lognormal_approx(n = 10000) cauchy_approx_sample <- r_cauchy_approx(n = 10000)  bind_rows(   data.frame(x = normal_approx_sample, dist = \"Spline interpolation,\\nnormal tails\"),   data.frame(x = lognormal_approx_sample, dist = \"Spline interpolation,\\nlog-normal tails\"),   data.frame(x = cauchy_approx_sample, dist = \"Spline interpolation,\\nCauchy tails\") ) %>%   ggplot() +   geom_density(mapping = aes(x = x, color = dist, linetype = dist)) +   scale_color_viridis_d(     \"Distribution\",     end = 0.9   ) +   scale_linetype_discrete(\"Distribution\") +   theme_bw() bind_rows(   data.frame(x = normal_approx_sample, dist = \"Spline interpolation,\\nnormal tails\"),   data.frame(x = lognormal_approx_sample, dist = \"Spline interpolation,\\nlog-normal tails\"),   data.frame(x = cauchy_approx_sample, dist = \"Spline interpolation,\\nCauchy tails\") ) %>%   ggplot() +   geom_density(mapping = aes(x = x, color = dist, linetype = dist)) +   scale_color_viridis_d(     \"Distribution\",     end = 0.9   ) +   scale_linetype_discrete(\"Distribution\") +   xlim(-100, 300) +   theme_bw() #> Warning: Removed 280 rows containing non-finite outside the scale range #> (`stat_density()`). ps <- seq(from = 0.01, to = 0.99, by = 0.01)  q_normal_approx <- make_q_fn(ps = quantile_probs,                              qs = q_lognormal,                              tail_dist = \"norm\") q_lognormal_approx <- make_q_fn(ps = quantile_probs,                                 qs = q_lognormal,                                 tail_dist = \"lnorm\") q_cauchy_approx <- make_q_fn(ps = quantile_probs,                              qs = q_lognormal,                              tail_dist = \"cauchy\")  quantiles_lognormal <- qlnorm(ps, meanlog = meanlog, sdlog = sdlog) quantiles_normal_approx <- q_normal_approx(ps) quantiles_lognormal_approx <- q_lognormal_approx(ps) quantiles_cauchy_approx <- q_cauchy_approx(ps)   dplyr::bind_rows(   data.frame(     x = ps,     y = quantiles_lognormal,     dist = \"Log normal\"   ),   data.frame(     x = ps,     y = quantiles_normal_approx,     dist = \"Spline interpolation,\\nnormal tails\"   ),   data.frame(     x = ps,     y = quantiles_lognormal_approx,     dist = \"Spline interpolation,\\nlognormal tails\"   ),   data.frame(     x = ps,     y = quantiles_cauchy_approx,     dist = \"Spline interpolation,\\nCauchy tails\"   ) ) %>%   ggplot() +   geom_line(     mapping = aes(x = x, y = y, color = dist, linetype = dist),     size = 0.8   ) +   scale_color_viridis_d(     \"Distribution\",     end = 0.9   ) +   scale_linetype_discrete(\"Distribution\") +   ylab(\"Quantile\") +   xlab(\"Probability Level\") +   theme_bw()"},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"example-2-lognormal-tails-with-a-point-mass-at-0","dir":"Articles","previous_headings":"Illustration of package functionality","what":"Example 2: lognormal tails with a point mass at 0","title":"distfromq","text":"lognormal distribution specifies P(X≤0)=0P(X \\leq 0) = 0, .e., random variable always non-negative values. lognormal tail distribution used, e.g. ensure distribution’s support non-negative capture long right tail, package inserts point mass 0 provided quantiles 0. illustrate behavior example. Note cdf estimate zero 0, jumps 0.2 0, continuous thereafter.  expected, quantile function inverts cdf.  can verify plotting quantile function estimate inverted axes display cdf estimate:  Samples distribution estimate include concentration values 0:  distribution discrete component, produce density estimate: Note get error estimating density normal tail distribution, case forced assume point mass 0:","code":"# mixture of a LogNormal(4, 0.5) distribution with weight 0.8 and # a point mass at 0 with weight 0.2  # probabilities and quantiles for the lognormal component lnorm_ps <- seq(from = 0.1, to = 0.9, by = 0.1) lnorm_qs <- qlnorm(lnorm_ps, meanlog = 4.0, sdlog = 0.5) adj_lnorm_ps <- 0.2 + lnorm_ps * 0.8  # quantile at 0 with probability 0.2 for the point mass at 0 point_p <- 0.2 point_q <- 0.0  ps <- c(point_p, adj_lnorm_ps) qs <- c(point_q, lnorm_qs) x <- seq(from = -100.0, to = 400.0, length = 501)  p_lognormal_approx <- make_p_fn(ps = ps,                                 qs = qs,                                 tail_dist = \"lnorm\") cdf_lognormal_approx <- p_lognormal_approx(x)  data.frame(   x = x,   y = cdf_lognormal_approx ) %>%   ggplot() +   geom_line(     mapping = aes(x = x, y = y),     size = 0.8   ) +   geom_point(     data = data.frame(q = qs, p = ps),     mapping = aes(x = q, y = p),     size = 1.2   ) +   ylim(0, 1) +   ylab(\"Probability\") +   xlab(\"\") +   theme_bw() plot_ps <- seq(from = 0.00, to = 0.99, by = 0.001)  q_lognormal_approx <- make_q_fn(ps = ps,                                 qs = qs,                                 tail_dist = \"lnorm\") qf_lognormal_approx <- q_lognormal_approx(plot_ps)  data.frame(   x = plot_ps,   y = qf_lognormal_approx ) %>%   ggplot() +   geom_line(     mapping = aes(x = x, y = y),     size = 0.8   ) +   geom_point(     data = data.frame(q = ps, p = qs),     mapping = aes(x = q, y = p),     size = 1.2   ) +   xlim(0, 1) +   xlab(\"Probability\") +   ylab(\"\") +   theme_bw() dplyr::bind_rows(   data.frame(     x = x,     y = cdf_lognormal_approx,     method = \"CDF Estimate\"   ),   data.frame(     x = qf_lognormal_approx,     y = plot_ps,     method = \"Flipped QF Estimate\"   ) ) %>%   ggplot() +   geom_line(     mapping = aes(x = x, y = y, color = method, linetype = method),     size = 0.8   ) +   geom_point(     data = data.frame(q = qs, p = ps),     mapping = aes(x = q, y = p),     size = 1.2   ) +   ylim(0, 1) +   ylab(\"Probability\") +   xlab(\"\") +   theme_bw() r_fn <- make_r_fn(ps = ps, qs = qs, tail_dist = \"lnorm\")  sampled_values_df <- data.frame(x = r_fn(10000))  ggplot(sampled_values_df) +   geom_histogram(mapping = aes(x = x), bins = 100) +   theme_bw() mean(sampled_values_df$x == 0) #> [1] 0.196 d_fn_lnorm <- make_d_fn(ps = ps, qs = qs, tail_dist = \"lnorm\") #> Error in make_d_fn(ps = ps, qs = qs, tail_dist = \"lnorm\"): make_d_fn requires the distribution to be continuous, but a discrete component was detected d_fn_norm <- make_d_fn(ps = ps, qs = qs, tail_dist = \"norm\")"},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"example-3-duplicated-quantiles-on-the-interior","dir":"Articles","previous_headings":"Illustration of package functionality","what":"Example 3: duplicated quantiles on the interior","title":"distfromq","text":"quantile values multiple probability levels, distribution assigns non-zero probability value, corresponding “step” “jump” cumulative distribution function. , note case, make_d_fn throw error continuous density exist. illustrate behavior estimates provided make_p_fn make_q_fn presence repeated quantiles following example.   confirm estimated CDF QF indeed inverses high degree numerical precision regions distribution continuous: described earlier, use piecewise linear representation CDF avoid numerical issues arise inverting monotonic spline. illustrate problems manually setting n_grid = NULL, .e., using stage 1 CDF estimate based directly splines. two representations CDF generally quite similar, QF estimates can differ substantially.   therefore recommend using piecewise linear representation using quantile function generating random deviates, uses quantile function background.","code":"quantile_probs <- seq(from = 0.1, to = 0.9, by = 0.1) quantile_values <- c(1.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 8.0, 9.0)  d_normal_approx <- make_d_fn(ps = quantile_probs,                              qs = quantile_values,                              tail_dist = \"norm\") #> Error in make_d_fn(ps = quantile_probs, qs = quantile_values, tail_dist = \"norm\"): make_d_fn requires the distribution to be continuous, but a discrete component was detected p_normal_approx <- make_p_fn(ps = quantile_probs,                              qs = quantile_values,                              tail_dist = \"norm\") q_normal_approx <- make_q_fn(ps = quantile_probs,                              qs = quantile_values,                              tail_dist = \"norm\") r_normal_approx <- make_r_fn(ps = quantile_probs,                              qs = quantile_values,                              tail_dist = \"norm\")  x <- seq(from = 0.0, to = 20.0, length = 5001) cdf_normal_approx <- p_normal_approx(x) ggplot() +   geom_line(data = data.frame(x = x, y = cdf_normal_approx),             mapping = aes(x = x, y = y)) +   geom_point(data = data.frame(x = quantile_values, y = quantile_probs),              mapping = aes(x = x, y = y)) ps <- seq(from = 0.0, to = 1.0, length = 5001) qf_normal_approx <- q_normal_approx(ps) ggplot() +   geom_line(data = data.frame(p = ps, y = qf_normal_approx),             mapping = aes(x = p, y = y)) +   geom_point(data = data.frame(x = quantile_probs, y = quantile_values),              mapping = aes(x = x, y = y)) samples_normal_approx <- r_normal_approx(n = 10000) mean(samples_normal_approx == 3.0) #> [1] 0.3994 ps <- seq(from = 0.0, to = 1.0, length = 101) out_ps <- p_normal_approx(q_normal_approx(ps)) out_ps #>   [1] 0.00 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 #>  [16] 0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 #>  [31] 0.30 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 #>  [46] 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 #>  [61] 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.70 0.71 0.72 0.73 0.74 #>  [76] 0.75 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 #>  [91] 0.90 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.00  ps[(ps < 0.3) | (ps > 0.7)] - out_ps[(ps < 0.3) | (ps > 0.7)] #>  [1]  0.000000e+00 -1.561251e-17 -3.469447e-18 -1.040834e-17  0.000000e+00 #>  [6] -2.775558e-17  2.775558e-17  0.000000e+00  0.000000e+00  0.000000e+00 #> [11]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [16]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 -2.775558e-17 #> [21]  0.000000e+00  0.000000e+00  2.775558e-17  0.000000e+00  0.000000e+00 #> [26]  0.000000e+00  5.551115e-17  0.000000e+00  0.000000e+00  0.000000e+00 #> [31]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [36]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [41]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  1.110223e-16 #> [46]  0.000000e+00  0.000000e+00 -1.110223e-16  0.000000e+00 -1.110223e-16 #> [51]  0.000000e+00  0.000000e+00  1.110223e-16  0.000000e+00  0.000000e+00 #> [56]  0.000000e+00  0.000000e+00  1.110223e-16  0.000000e+00  0.000000e+00 #> [61]  0.000000e+00 p_normal_approx_spline <- make_p_fn(ps = quantile_probs,                                     qs = quantile_values,                                     tail_dist = \"norm\",                                     interior_args = list(n_grid = NULL)) q_normal_approx_spline <- make_q_fn(ps = quantile_probs,                                     qs = quantile_values,                                     tail_dist = \"norm\",                                     interior_args = list(n_grid = NULL))  x <- seq(from = 0.0, to = 20.0, length = 5001) plot_df <- rbind(   data.frame(     x = x,     cdf = p_normal_approx(x),     type = \"piecewise linear\"   ),   data.frame(     x = x,     cdf = p_normal_approx_spline(x),     type = \"spline\"   ) ) ggplot() +   geom_line(data = plot_df,             mapping = aes(x = x, y = cdf, color = type, linetype = type)) +   geom_point(data = data.frame(x = quantile_values, y = quantile_probs),              mapping = aes(x = x, y = y)) ps <- seq(from = 0.0, to = 1.0, length = 5001) plot_df <- rbind(   data.frame(     p = ps,     qf = q_normal_approx(ps),     type = \"piecewise linear\"   ),   data.frame(     p = ps,     qf = q_normal_approx_spline(ps),     type = \"spline\"   ) ) ggplot() +   geom_line(data = plot_df,             mapping = aes(x = p, y = qf, color = type, linetype = type)) +   geom_point(data = data.frame(x = quantile_probs, y = quantile_values),              mapping = aes(x = x, y = y))"},{"path":"http://reichlab.io/distfromq/articles/distfromq.html","id":"example-4-duplicated-quantiles-in-the-tails","dir":"Articles","previous_headings":"Illustration of package functionality","what":"Example 4: duplicated quantiles in the tails","title":"distfromq","text":"final example illustrates behavior duplicated quantiles edges. cases, ignore specified tail_dist, assume point mass edge contains tail probability.","code":"quantile_probs <- seq(from = 0.1, to = 0.9, by = 0.1) quantile_values <- c(1.0, 1.0, 3.0, 3.0, 3.0, 3.0, 3.0, 9.0, 9.0)  p_normal_approx <- make_p_fn(ps = quantile_probs,                              qs = quantile_values,                              tail_dist = \"norm\") p_normal_approx_lin <- make_p_fn(ps = quantile_probs,                                  qs = quantile_values,                                  tail_dist = \"norm\",                                  interior_args = list(n_grid = 20)) q_normal_approx <- make_q_fn(ps = quantile_probs,                              qs = quantile_values,                              tail_dist = \"norm\") q_normal_approx_lin <- make_q_fn(ps = quantile_probs,                                  qs = quantile_values,                                  tail_dist = \"norm\",                                  interior_args = list(n_grid = 20))  x <- seq(from = 0.0, to = 20.0, length = 5001) plot_df <- rbind(   data.frame(     x = x,     cdf = p_normal_approx(x),     type = \"spline\"   ),   data.frame(     x = x,     cdf = p_normal_approx_lin(x),     type = \"piecewise linear\"   ) ) ggplot() +   geom_line(data = plot_df,             mapping = aes(x = x, y = cdf, color = type, linetype = type)) +   geom_point(data = data.frame(x = quantile_values, y = quantile_probs),              mapping = aes(x = x, y = y)) ps <- seq(from = 0.0, to = 1.0, length = 5001) plot_df <- rbind(   data.frame(     p = ps,     qf = q_normal_approx(ps),     type = \"spline\"   ),   data.frame(     p = ps,     qf = q_normal_approx_lin(ps),     type = \"piecewise linear\"   ) ) ggplot() +   geom_line(data = plot_df,             mapping = aes(x = p, y = qf, color = type, linetype = type)) +   geom_point(data = data.frame(x = quantile_probs, y = quantile_values),              mapping = aes(x = x, y = y))"},{"path":"http://reichlab.io/distfromq/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Evan Ray. Author, maintainer. Aaron Gerding. Author. Li Shandross. Contributor. Nick Reich. Contributor.","code":""},{"path":"http://reichlab.io/distfromq/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ray E, Gerding (2024). distfromq: Reconstruct Distribution Collection Quantiles. R package version 1.0.4, http://reichlab.io/distfromq/.","code":"@Manual{,   title = {distfromq: Reconstruct a Distribution from a Collection of Quantiles},   author = {Evan Ray and Aaron Gerding},   year = {2024},   note = {R package version 1.0.4},   url = {http://reichlab.io/distfromq/}, }"},{"path":"http://reichlab.io/distfromq/index.html","id":"distfromq","dir":"","previous_headings":"","what":"Reconstruct a Distribution from a Collection of Quantiles","title":"Reconstruct a Distribution from a Collection of Quantiles","text":"Given set predictive quantiles distribution, estimate distribution create d, p, q, r functions evaluate density function, distribution function, quantile function, generate random samples. interior provided quantiles, interpolation method monotonic cubic spline used; tails approximated location-scale family.","code":""},{"path":"http://reichlab.io/distfromq/reference/calc_loc_scale_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate location and scale parameters for a specified distribution so that it matches two specified quantiles — calc_loc_scale_params","title":"Calculate location and scale parameters for a specified distribution so that it matches two specified quantiles — calc_loc_scale_params","text":"Calculate location scale parameters specified distribution matches two specified quantiles","code":""},{"path":"http://reichlab.io/distfromq/reference/calc_loc_scale_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate location and scale parameters for a specified distribution so that it matches two specified quantiles — calc_loc_scale_params","text":"","code":"calc_loc_scale_params(ps, qs, dist)"},{"path":"http://reichlab.io/distfromq/reference/calc_loc_scale_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate location and scale parameters for a specified distribution so that it matches two specified quantiles — calc_loc_scale_params","text":"ps vector two probability levels distribution's quantiles distinct qs vector two distinct quantile values corresponding probability levels ps dist probability distribution use extrapolation. distribution location-scale family, \"norm\"al \"cauchy\"","code":""},{"path":"http://reichlab.io/distfromq/reference/calc_loc_scale_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate location and scale parameters for a specified distribution so that it matches two specified quantiles — calc_loc_scale_params","text":"named list entries \"\", location parameter, \"b\", scale parameter","code":""},{"path":"http://reichlab.io/distfromq/reference/clean_ps_and_qs.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up ps and qs provided by user: handle missing and unsorted values — clean_ps_and_qs","title":"Clean up ps and qs provided by user: handle missing and unsorted values — clean_ps_and_qs","text":"Clean ps qs provided user: handle missing unsorted values","code":""},{"path":"http://reichlab.io/distfromq/reference/clean_ps_and_qs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up ps and qs provided by user: handle missing and unsorted values — clean_ps_and_qs","text":"","code":"clean_ps_and_qs(ps, qs)"},{"path":"http://reichlab.io/distfromq/reference/clean_ps_and_qs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up ps and qs provided by user: handle missing and unsorted values — clean_ps_and_qs","text":"ps vector probability levels qs vector quantile values correponding ps","code":""},{"path":"http://reichlab.io/distfromq/reference/clean_ps_and_qs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up ps and qs provided by user: handle missing and unsorted values — clean_ps_and_qs","text":"named list entries ps qs","code":""},{"path":"http://reichlab.io/distfromq/reference/d_ext_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Extrapolate density function in a location-scale family matching specified quantiles. — d_ext_factory","title":"Extrapolate density function in a location-scale family matching specified quantiles. — d_ext_factory","text":"Extrapolate density function location-scale family matching specified quantiles.","code":""},{"path":"http://reichlab.io/distfromq/reference/d_ext_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extrapolate density function in a location-scale family matching specified quantiles. — d_ext_factory","text":"","code":"d_ext_factory(ps, qs, dist)"},{"path":"http://reichlab.io/distfromq/reference/d_ext_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extrapolate density function in a location-scale family matching specified quantiles. — d_ext_factory","text":"ps vector two probability levels distribution's quantiles distinct qs vector two distinct quantile values corresponding probability levels ps dist probability distribution use extrapolation. distribution location-scale family, \"normal\" \"Cauchy\"","code":""},{"path":"http://reichlab.io/distfromq/reference/d_ext_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extrapolate density function in a location-scale family matching specified quantiles. — d_ext_factory","text":"function parameters x log can used evaluate density function (log) distribution specified location-scale family quantiles matching ps qs","code":""},{"path":"http://reichlab.io/distfromq/reference/duplicated_tol.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify duplicated values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as duplicates even if not all values in the run are within the tolerance. — duplicated_tol","title":"Identify duplicated values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as duplicates even if not all values in the run are within the tolerance. — duplicated_tol","text":"Identify duplicated values sorted numeric vector, comparison specified numeric tolerance. run values consecutive pair closer together tolerance, labeled duplicates even values run within tolerance.","code":""},{"path":"http://reichlab.io/distfromq/reference/duplicated_tol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify duplicated values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as duplicates even if not all values in the run are within the tolerance. — duplicated_tol","text":"","code":"duplicated_tol(x, tol = 1e-06, incl_first = FALSE)"},{"path":"http://reichlab.io/distfromq/reference/duplicated_tol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify duplicated values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as duplicates even if not all values in the run are within the tolerance. — duplicated_tol","text":"x numeric vector identify duplicates tol numeric tolerance identifying duplicates incl_first boolean indicator whether first entry run duplicates indicated duplicate. FALSE mirrors behavior base R function duplicated.","code":""},{"path":"http://reichlab.io/distfromq/reference/duplicated_tol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify duplicated values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as duplicates even if not all values in the run are within the tolerance. — duplicated_tol","text":"boolean vector length x","code":""},{"path":"http://reichlab.io/distfromq/reference/get_dup_run_inds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get indices of starts and ends of runs of duplicate values — get_dup_run_inds","title":"Get indices of starts and ends of runs of duplicate values — get_dup_run_inds","text":"Get indices starts ends runs duplicate values","code":""},{"path":"http://reichlab.io/distfromq/reference/get_dup_run_inds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get indices of starts and ends of runs of duplicate values — get_dup_run_inds","text":"","code":"get_dup_run_inds(dups)"},{"path":"http://reichlab.io/distfromq/reference/get_dup_run_inds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get indices of starts and ends of runs of duplicate values — get_dup_run_inds","text":"dups boolean vector result calling duplicated_tol(..., incl_first = FALSE)","code":""},{"path":"http://reichlab.io/distfromq/reference/get_dup_run_inds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get indices of starts and ends of runs of duplicate values — get_dup_run_inds","text":"named list entries starts giving indices first element sequence runs duplicate values ends giving indices last element sequence runs duplicate values.","code":""},{"path":"http://reichlab.io/distfromq/reference/grid_augment_ps_qs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that augments ps and qs by filling in a grid of intermediate values for qs. n_grid new points are inserted between each pair of consecutive values in qs, and the corresponding ps are filled in by evaluating the spline output from spline_cdf_direct at the qs grid. — grid_augment_ps_qs","title":"Internal function that augments ps and qs by filling in a grid of intermediate values for qs. n_grid new points are inserted between each pair of consecutive values in qs, and the corresponding ps are filled in by evaluating the spline output from spline_cdf_direct at the qs grid. — grid_augment_ps_qs","text":"Internal function augments ps qs filling grid intermediate values qs. n_grid new points inserted pair consecutive values qs, corresponding ps filled evaluating spline output spline_cdf_direct qs grid.","code":""},{"path":"http://reichlab.io/distfromq/reference/grid_augment_ps_qs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that augments ps and qs by filling in a grid of intermediate values for qs. n_grid new points are inserted between each pair of consecutive values in qs, and the corresponding ps are filled in by evaluating the spline output from spline_cdf_direct at the qs grid. — grid_augment_ps_qs","text":"","code":"grid_augment_ps_qs(ps, qs, tail_dist, n_grid)"},{"path":"http://reichlab.io/distfromq/reference/make_d_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a function that evaluates the probability density function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_d_fn","title":"Creates a function that evaluates the probability density function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_d_fn","text":"Creates function evaluates probability density function approximation distribution obtained interpolating extrapolating set quantiles distribution.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_d_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a function that evaluates the probability density function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_d_fn","text":"","code":"make_d_fn(   ps,   qs,   interior_method = \"spline_cdf\",   interior_args = list(),   tail_dist = \"norm\",   dup_tol = 1e-06,   zero_tol = 1e-12 )"},{"path":"http://reichlab.io/distfromq/reference/make_d_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a function that evaluates the probability density function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_d_fn","text":"ps vector probability levels qs vector quantile values correponding ps interior_method method interpolating distribution interior provided qs. package provides one method , \"spline_cdf\". user may also provide custom function; see details . interior_args optional named list arguments passed interior_method tail_dist name parametric distribution tails dup_tol numeric tolerance identifying duplicated values indicating discrete component distribution. run values consecutive pair closer together tolerance, labeled duplicates even values run within tolerance. zero_tol numeric tolerance identifying values qs (approximately) zero.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_d_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a function that evaluates the probability density function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_d_fn","text":"function arguments x log can used evaluate approximate density function (log) points x.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_d_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a function that evaluates the probability density function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_d_fn","text":"default interior_method, \"spline_cdf\", represents distribution sum discrete component points duplicated qs multiple different ps continuous component estimated using monotonic cubic spline interpolates provided (q, p) pairs estimate cdf. density function obtained differentiating estimate cdf. Optionally, user may provide another function accepts arguments ps, qs, tail_dist, fn_type (either \"d\", \"p\", \"q\"), optionally additional named arguments specified via interior_args. function return function arguments x, log evaluates pdf logarithm.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_p_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a function that evaluates the cumulative distribution function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_p_fn","title":"Creates a function that evaluates the cumulative distribution function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_p_fn","text":"Creates function evaluates cumulative distribution function approximation distribution obtained interpolating extrapolating set quantiles distribution.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_p_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a function that evaluates the cumulative distribution function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_p_fn","text":"","code":"make_p_fn(   ps,   qs,   interior_method = \"spline_cdf\",   interior_args = list(),   tail_dist = \"norm\",   dup_tol = 1e-06,   zero_tol = 1e-12 )"},{"path":"http://reichlab.io/distfromq/reference/make_p_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a function that evaluates the cumulative distribution function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_p_fn","text":"ps vector probability levels qs vector quantile values correponding ps interior_method method interpolating distribution interior provided qs. package provides one method , \"spline_cdf\". user may also provide custom function; see details . interior_args optional named list arguments passed interior_method tail_dist name parametric distribution tails dup_tol numeric tolerance identifying duplicated values indicating discrete component distribution. run values consecutive pair closer together tolerance, labeled duplicates even values run within tolerance. zero_tol numeric tolerance identifying values qs (approximately) zero.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_p_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a function that evaluates the cumulative distribution function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_p_fn","text":"function arguments q log.p can used evaluate approximate cumulative distribution function (log) points q.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_p_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a function that evaluates the cumulative distribution function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_p_fn","text":"default interior_method, \"spline_cdf\", represents distribution sum discrete component points duplicated qs multiple different ps continuous component estimated using monotonic cubic spline interpolates provided (q, p) pairs estimate cdf. Optionally, user may provide another function accepts arguments ps, qs, tail_dist, fn_type (either \"d\", \"p\", \"q\"), optionally additional named arguments specified via interior_args. function return function arguments x, log evaluates pdf logarithm.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_q_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a function that evaluates the quantile function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_q_fn","title":"Creates a function that evaluates the quantile function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_q_fn","text":"Creates function evaluates quantile function approximation distribution obtained interpolating extrapolating set quantiles distribution.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_q_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a function that evaluates the quantile function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_q_fn","text":"","code":"make_q_fn(   ps,   qs,   interior_method = \"spline_cdf\",   interior_args = list(),   tail_dist = \"norm\",   dup_tol = 1e-06,   zero_tol = 1e-12 )"},{"path":"http://reichlab.io/distfromq/reference/make_q_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a function that evaluates the quantile function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_q_fn","text":"ps vector probability levels qs vector quantile values correponding ps interior_method method interpolating distribution interior provided qs. package provides one method , \"spline_cdf\". user may also provide custom function; see details . interior_args optional named list arguments passed interior_method tail_dist name parametric distribution tails dup_tol numeric tolerance identifying duplicated values indicating discrete component distribution. run values consecutive pair closer together tolerance, labeled duplicates even values run within tolerance. zero_tol numeric tolerance identifying values qs (approximately) zero.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_q_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a function that evaluates the quantile function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_q_fn","text":"function argument p can used calculate quantiles approximated distribution probability levels p.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_q_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a function that evaluates the quantile function of an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_q_fn","text":"default interior_method, \"spline_cdf\", represents distribution sum discrete component points duplicated qs multiple different ps continuous component estimated using monotonic cubic spline interpolates provided (q, p) pairs estimate cdf. quantile function obtained inverting estimate cdf. Optionally, user may provide another function accepts arguments ps, qs, tail_dist, fn_type (either \"d\", \"p\", \"q\"), optionally additional named arguments specified via interior_args. function return function argument p evaluates quantile function.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_r_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a function that generates random deviates from an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_r_fn","title":"Creates a function that generates random deviates from an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_r_fn","text":"Creates function generates random deviates approximation distribution obtained interpolating extrapolating set quantiles distribution.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_r_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a function that generates random deviates from an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_r_fn","text":"","code":"make_r_fn(   ps,   qs,   interior_method = \"spline_cdf\",   interior_args = list(),   tail_dist = \"norm\",   dup_tol = 1e-06,   zero_tol = 1e-12 )"},{"path":"http://reichlab.io/distfromq/reference/make_r_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a function that generates random deviates from an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_r_fn","text":"ps vector probability levels qs vector quantile values correponding ps interior_method method interpolating distribution interior provided qs. package provides one method , \"spline_cdf\". user may also provide custom function; see details . interior_args optional named list arguments passed interior_method tail_dist name parametric distribution tails dup_tol numeric tolerance identifying duplicated values indicating discrete component distribution. run values consecutive pair closer together tolerance, labeled duplicates even values run within tolerance. zero_tol numeric tolerance identifying values qs (approximately) zero.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_r_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a function that generates random deviates from an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_r_fn","text":"function argument n can used generate sample size n approximated distribution.","code":""},{"path":"http://reichlab.io/distfromq/reference/make_r_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a function that generates random deviates from an approximation to a distribution obtained by interpolating and extrapolating from a set of quantiles of the distribution. — make_r_fn","text":"default interior_method, \"spline_cdf\", represents distribution sum discrete component points duplicated qs multiple different ps continuous component estimated using monotonic cubic spline interpolates provided (q, p) pairs estimate cdf. quantile function obtained inverting estimate cdf. Optionally, user may provide another function accepts arguments ps, qs, tail_dist, fn_type (either \"d\", \"p\", \"q\"), optionally additional named arguments specified via interior_args. function return function argument p evaluates quantile function.","code":""},{"path":"http://reichlab.io/distfromq/reference/mono_Hermite_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a polySpline object representing a monotonic Hermite spline interpolating a given set of points. — mono_Hermite_spline","title":"Create a polySpline object representing a monotonic Hermite spline interpolating a given set of points. — mono_Hermite_spline","text":"Create polySpline object representing monotonic Hermite spline interpolating given set points.","code":""},{"path":"http://reichlab.io/distfromq/reference/mono_Hermite_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a polySpline object representing a monotonic Hermite spline interpolating a given set of points. — mono_Hermite_spline","text":"","code":"mono_Hermite_spline(x, y, m)"},{"path":"http://reichlab.io/distfromq/reference/mono_Hermite_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a polySpline object representing a monotonic Hermite spline interpolating a given set of points. — mono_Hermite_spline","text":"x vector giving x coordinates points interpolated. Alternatively single plotting structure can specified: see ‘xy.coords’. y vector giving y coordinates points interpolated. Must increasing decreasing ‘method = \"hyman\"’. Alternatively single plotting structure can specified: see ‘xy.coords’. m (‘splinefunH()’) vector slopes \\(m_i\\) points \\((x_i,y_i)\\); together determine Hermite “spline” piecewise cubic, () differentiable continuously.","code":""},{"path":"http://reichlab.io/distfromq/reference/mono_Hermite_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a polySpline object representing a monotonic Hermite spline interpolating a given set of points. — mono_Hermite_spline","text":"object class polySpline spline object, suitable use functionality splines package.","code":""},{"path":"http://reichlab.io/distfromq/reference/mono_Hermite_spline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a polySpline object representing a monotonic Hermite spline interpolating a given set of points. — mono_Hermite_spline","text":"function essentially reproduces stats::splinefunH, returns polynomial spline object used splines package rather function evaluates spline, potentially makes adjustments input slopes m enforce monotonicity.","code":""},{"path":"http://reichlab.io/distfromq/reference/p_ext_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Extrapolate cumulative distribution function in a location-scale family matching specified quantiles. — p_ext_factory","title":"Extrapolate cumulative distribution function in a location-scale family matching specified quantiles. — p_ext_factory","text":"Extrapolate cumulative distribution function location-scale family matching specified quantiles.","code":""},{"path":"http://reichlab.io/distfromq/reference/p_ext_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extrapolate cumulative distribution function in a location-scale family matching specified quantiles. — p_ext_factory","text":"","code":"p_ext_factory(ps, qs, dist)"},{"path":"http://reichlab.io/distfromq/reference/p_ext_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extrapolate cumulative distribution function in a location-scale family matching specified quantiles. — p_ext_factory","text":"ps vector two probability levels distribution's quantiles distinct qs vector two distinct quantile values corresponding probability levels ps dist probability distribution use extrapolation. distribution location-scale family, \"normal\" \"Cauchy\"","code":""},{"path":"http://reichlab.io/distfromq/reference/p_ext_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extrapolate cumulative distribution function in a location-scale family matching specified quantiles. — p_ext_factory","text":"function parameter x log.p can used evaluate cumulative distribution function (log) distribution specified location-scale family quantiles matching ps qs","code":""},{"path":"http://reichlab.io/distfromq/reference/q_ext_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Extrapolate quantile function in a location-scale family matching specified quantiles. — q_ext_factory","title":"Extrapolate quantile function in a location-scale family matching specified quantiles. — q_ext_factory","text":"Extrapolate quantile function location-scale family matching specified quantiles.","code":""},{"path":"http://reichlab.io/distfromq/reference/q_ext_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extrapolate quantile function in a location-scale family matching specified quantiles. — q_ext_factory","text":"","code":"q_ext_factory(ps, qs, dist)"},{"path":"http://reichlab.io/distfromq/reference/q_ext_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extrapolate quantile function in a location-scale family matching specified quantiles. — q_ext_factory","text":"ps vector two probability levels distribution's quantiles distinct qs vector two distinct quantile values corresponding probability levels ps dist probability distribution use extrapolation. distribution location-scale family, \"normal\" \"Cauchy\"","code":""},{"path":"http://reichlab.io/distfromq/reference/q_ext_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extrapolate quantile function in a location-scale family matching specified quantiles. — q_ext_factory","text":"function parameter p can used evaluate quantile function distribution specified location-scale family quantiles matching ps qs","code":""},{"path":"http://reichlab.io/distfromq/reference/spline_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate density function, cdf, or quantile function on the interior of provided quantiles by representing the distribution as a sum of a discrete part at any duplicated qs and a continuous part for which the cdf is estimated using a monotonic Hermite spline. See details for more. — spline_cdf","title":"Approximate density function, cdf, or quantile function on the interior of provided quantiles by representing the distribution as a sum of a discrete part at any duplicated qs and a continuous part for which the cdf is estimated using a monotonic Hermite spline. See details for more. — spline_cdf","text":"Approximate density function, cdf, quantile function interior provided quantiles representing distribution sum discrete part duplicated qs continuous part cdf estimated using monotonic Hermite spline. See details . Internal function constructs monotonic Hermite spline interpolating ps qs.","code":""},{"path":"http://reichlab.io/distfromq/reference/spline_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate density function, cdf, or quantile function on the interior of provided quantiles by representing the distribution as a sum of a discrete part at any duplicated qs and a continuous part for which the cdf is estimated using a monotonic Hermite spline. See details for more. — spline_cdf","text":"","code":"spline_cdf(ps, qs, tail_dist, fn_type = c(\"d\", \"p\", \"q\"), n_grid = 20)  spline_cdf_grid_interp(   ps,   qs,   tail_dist,   fn_type = c(\"d\", \"p\", \"q\"),   n_grid = 20 )  spline_cdf_direct(ps, qs, tail_dist, fn_type = c(\"d\", \"p\", \"q\"))"},{"path":"http://reichlab.io/distfromq/reference/spline_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate density function, cdf, or quantile function on the interior of provided quantiles by representing the distribution as a sum of a discrete part at any duplicated qs and a continuous part for which the cdf is estimated using a monotonic Hermite spline. See details for more. — spline_cdf","text":"ps vector probability levels qs vector quantile values correponding ps tail_dist name parametric distribution tails fn_type type function requested: \"d\" pdf, \"p\" cdf, \"q\" quantile function. n_grid grid size use augmenting input qs obtain finer grid points along form piecewise linear approximation spline. n_grid evenly-spaced points inserted pair consecutive values qs. default value 20. can set NULL, case piecewise linear approximation used. recommended fn_type \"q\".","code":""},{"path":"http://reichlab.io/distfromq/reference/spline_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate density function, cdf, or quantile function on the interior of provided quantiles by representing the distribution as a sum of a discrete part at any duplicated qs and a continuous part for which the cdf is estimated using a monotonic Hermite spline. See details for more. — spline_cdf","text":"function evaluate pdf, cdf, quantile function.","code":""},{"path":"http://reichlab.io/distfromq/reference/spline_cdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate density function, cdf, or quantile function on the interior of provided quantiles by representing the distribution as a sum of a discrete part at any duplicated qs and a continuous part for which the cdf is estimated using a monotonic Hermite spline. See details for more. — spline_cdf","text":"cdf continuous part distribution estimated using monotonic degree 3 Hermite spline interpolates quantiles subtracting discrete distribution renormalizing. theory, estimate quantile function obtained directly inverting spline. However, practice, observed can suffer numerical problems. Therefore, default behavior function evaluate \"stage 1\" cdf estimate corresponding discrete point masses plus monotonic spline fine grid points, use \"stage 2\" cdf estimate linearly interpolates points steps duplicated q values. quantile function estimate obtained inverting \"stage 2\" cdf estimate. distribution continuous, can obtain estimate pdf differentiating cdf estimate, resulting discontinuous \"histogram density\". size grid can specified n_grid argument. settings desirable obtain continuous density function, \"stage 1\" cdf estimate can used setting n_grid = NULL.","code":""},{"path":"http://reichlab.io/distfromq/reference/split_disc_cont_ps_qs.html","id":null,"dir":"Reference","previous_headings":"","what":"Split ps and qs into those corresponding to discrete and continuous parts of a distribution. — split_disc_cont_ps_qs","title":"Split ps and qs into those corresponding to discrete and continuous parts of a distribution. — split_disc_cont_ps_qs","text":"Split ps qs corresponding discrete continuous parts distribution.","code":""},{"path":"http://reichlab.io/distfromq/reference/split_disc_cont_ps_qs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split ps and qs into those corresponding to discrete and continuous parts of a distribution. — split_disc_cont_ps_qs","text":"","code":"split_disc_cont_ps_qs(   ps,   qs,   dup_tol = 1e-06,   zero_tol = 1e-12,   is_hurdle = FALSE )"},{"path":"http://reichlab.io/distfromq/reference/split_disc_cont_ps_qs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split ps and qs into those corresponding to discrete and continuous parts of a distribution. — split_disc_cont_ps_qs","text":"ps vector probability levels qs vector quantile values correponding ps dup_tol numeric tolerance identifying duplicated values indicating discrete component distribution. run values consecutive pair closer together tolerance, labeled duplicates even values run within tolerance. zero_tol numeric tolerance identifying values qs (approximately) zero. is_hurdle boolean indicating whether hurdle model. , qs zero always indicate presence point mass 0. case, 0 included among returned cont_qs. Setting argument TRUE primarily appropriate working distributional family bounded 0 (may density 0 0) lognormal.","code":""},{"path":"http://reichlab.io/distfromq/reference/split_disc_cont_ps_qs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split ps and qs into those corresponding to discrete and continuous parts of a distribution. — split_disc_cont_ps_qs","text":"named list following entries: disc_weight: estimated numeric weight discrete part distribution. disc_ps: estimated probabilities discrete components. May numeric(0) estimated discrete components. disc_qs: locations discrete components, corresponding duplicated values input qs. May numeric(0) discrete components. cont_ps: probability levels continous part distribution cont_qs: quantile values continous part distribution disc_ps_range: list length equal number point masses discrete distribution. entry numeric vector length two value cdf approaching point mass left right.","code":""},{"path":"http://reichlab.io/distfromq/reference/step_interp_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"A factory that returns a function that performs linear interpolation, allowing for ","title":"A factory that returns a function that performs linear interpolation, allowing for ","text":"factory returns function performs linear interpolation, allowing \"steps\" discontinuities.","code":""},{"path":"http://reichlab.io/distfromq/reference/step_interp_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A factory that returns a function that performs linear interpolation, allowing for ","text":"","code":"step_interp_factory(x, y, cont_dir = c(\"right\", \"left\"), increasing = TRUE)"},{"path":"http://reichlab.io/distfromq/reference/step_interp_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A factory that returns a function that performs linear interpolation, allowing for ","text":"x numeric vector \"horizontal axis\" coordinates points interpolate. y numeric vector \"vertical axis\" coordinates points interpolate. cont_dir steps discontinuities, direction function continuous. \"right\" cdf \"left\" qf. increasing boolean indicating whether function increasing decreasing. used degenerate case one unique value x.","code":""},{"path":"http://reichlab.io/distfromq/reference/step_interp_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A factory that returns a function that performs linear interpolation, allowing for ","text":"function argument x performs linear approximation input data points.","code":""},{"path":"http://reichlab.io/distfromq/reference/unique_tol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as corresponding to a single unique value even if not all values in the run are within the tolerance. — unique_tol","title":"Get unique values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as corresponding to a single unique value even if not all values in the run are within the tolerance. — unique_tol","text":"Get unique values sorted numeric vector, comparison specified numeric tolerance. run values consecutive pair closer together tolerance, labeled corresponding single unique value even values run within tolerance.","code":""},{"path":"http://reichlab.io/distfromq/reference/unique_tol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as corresponding to a single unique value even if not all values in the run are within the tolerance. — unique_tol","text":"","code":"unique_tol(x, tol = 1e-06, ties = mean)"},{"path":"http://reichlab.io/distfromq/reference/unique_tol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as corresponding to a single unique value even if not all values in the run are within the tolerance. — unique_tol","text":"x numeric vector identify duplicates tol numeric tolerance identifying duplicates ties function used summarize groups values fall within tolerance","code":""},{"path":"http://reichlab.io/distfromq/reference/unique_tol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique values in a sorted numeric vector, where comparison is up to a specified numeric tolerance. If there is a run of values where each consecutive pair is closer together than the tolerance, all are labeled as corresponding to a single unique value even if not all values in the run are within the tolerance. — unique_tol","text":"numeric vector unique values x","code":""},{"path":"http://reichlab.io/distfromq/news/index.html","id":"distfromq-104","dir":"Changelog","previous_headings":"","what":"distfromq 1.0.4","title":"distfromq 1.0.4","text":"Fix bug floating point issues cause adjusted probability levels fall outside interval [0, 1] point mass 0.","code":""},{"path":"http://reichlab.io/distfromq/news/index.html","id":"distfromq-103","dir":"Changelog","previous_headings":"","what":"distfromq 1.0.3","title":"distfromq 1.0.3","text":"Updates function imports documentation","code":""},{"path":"http://reichlab.io/distfromq/news/index.html","id":"distfromq-102","dir":"Changelog","previous_headings":"","what":"distfromq 1.0.2","title":"distfromq 1.0.2","text":"Fix bug came multiple discrete point masses, floating point issues cause adjusted probability levels fall outside interval [0, 1]. Add argument checking.","code":""},{"path":"http://reichlab.io/distfromq/news/index.html","id":"distfromq-101","dir":"Changelog","previous_headings":"","what":"distfromq 1.0.1","title":"distfromq 1.0.1","text":"Fix bug quantiles occur one three duplicated values, one zero, tail distribution \"lnorm\".","code":""},{"path":[]},{"path":"http://reichlab.io/distfromq/news/index.html","id":"major-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"distfromq 1.0.0","text":"Refactored handling discrete point masses distribution, goal better supporting use lognormal distribution tails. Removed separate arguments lower_tail_dist upper_tail_dist, replaced single tail_dist used tails. now recommend use tail_dist = \"lnorm\" target variable bounded zero. choice automatically handle non-negativity constraint correctly, longer right tail default choice tail_dist = \"norm\". Introduced parameters dup_tol, used detecting point masses quantile values approximate duplicates (.e., distance less dup_tol), zero_tol, used detecting point masses 0 lognormal family used. Updated vignette Added comprehensive suite unit tests.","code":""},{"path":"http://reichlab.io/distfromq/news/index.html","id":"distfromq-012","dir":"Changelog","previous_headings":"","what":"distfromq 0.1.2","title":"distfromq 0.1.2","text":"Correct bugs handling situations one unique q provided input.","code":""}]
